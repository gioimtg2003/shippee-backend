openapi: 3.0.0
paths:
  /api/mail:
    post:
      operationId: MailController_sendMail
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Mail
  /api/admin/me:
    get:
      operationId: AdminController_meProfile
      parameters: []
      responses:
        '200':
          description: Successful get admin profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMeDTO'
      summary: Get admin profile
      tags:
        - Admin
  /api/driver-manage/driver:
    post:
      operationId: DriverManageController_createDriver
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriverInput'
      responses:
        '200':
          description: Driver created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: boolean
                        example: true
      summary: Create a driver
      tags: &ref_0
        - driver-manage
    get:
      operationId: DriverManageController_getAllDriver
      parameters: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CreateDriverInput'
      summary: Get all driver
      tags: *ref_0
    put:
      operationId: DriverManageController_updateDriver
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDriverInput'
      responses:
        '200':
          description: Driver updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: boolean
                        example: true
      summary: Update a driver
      tags: *ref_0
  /api/driver-manage/driver/{id}:
    get:
      operationId: DriverManageController_getDriver
      parameters:
        - name: relations
          required: true
          in: query
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      summary: Get details driver
      tags: *ref_0
  /api/driver-manage/driver/info:
    post:
      operationId: DriverManageController_createInfo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriverInfoInput'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/CreateDriverInfoInput'
      summary: Create a partner identification info
      tags: *ref_0
    put:
      operationId: DriverManageController_updateInfo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDriverInfoInput'
      responses:
        '200':
          description: Update partner identification info
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: boolean
                        example: true
      summary: Create a partner identification info
      tags: *ref_0
  /api/driver-manage/driver/count:
    post:
      operationId: DriverManageController_countDriver
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountDriverDto'
      responses:
        '200':
          description: Number of drivers with the given filter
          content:
            application/json:
              schema:
                type: number
      summary: Count driver
      tags: *ref_0
  /api/driver/identity:
    post:
      operationId: DriverController_updateIdentity
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDriverInfoInput'
      responses:
        '200':
          description: Update driver identity successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: boolean
                        example: true
      tags:
        - Driver
  /api/image/signed-url:
    post:
      description: >-
        Get signed URL for uploading image. The URL will be expired in 30
        seconds.
      operationId: ImageController_signedUrl
      parameters:
        - name: x-shipppee-timestamp
          in: header
          description: Request timestamp
          schema:
            type: string
        - name: x-shipppee-sha-256
          in: header
          description: SHA-256 hash of the request
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUrlInput'
      responses:
        '200':
          description: Return signed URL
          content:
            application/json:
              example:
                url: >-
                  https://ship.abc9asd.r2.cloudflarestorage.com/hihi.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=d64ccf0d4b1449153d78215ffff23asd0de1fd2b357e153026c9a3fada96&X-Amz-Credential=sda32423dasd060f73%2F20241120%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241120T104831Z&X-Amz-Expires=30&X-Amz-Signature=5c532bae6ae932dasd44279fa980ec3bac64d5a210b037319f06d86f1&X-Amz-SignedHeaders=content-type%3Bhost%3Bx-amz-checksum-sha256&x-id=PutObject
                key: 1234-1234-1234-1234.png
      summary: Get signed URL
      tags: &ref_1
        - image
  /api/image/{key}:
    get:
      description: Get image from the bucket
      operationId: ImageController_getImage
      parameters:
        - name: key
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Return image
      summary: Get image
      tags: *ref_1
  /api/transport-type:
    get:
      operationId: TransportTypeController_find
      parameters:
        - name: x-shipppee-timestamp
          in: header
          description: Request timestamp
          required: true
          schema:
            type: string
        - name: x-shipppee-sha-256
          in: header
          description: SHA-256 hash of the request
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TransportTypeDTO'
      summary: Get all transport types
      tags:
        - transport-type
  /api/auth-admin/login:
    post:
      operationId: AuthAdminController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginInput'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '400':
          description: Bad request
      summary: Admin user login
      tags:
        - auth-admin
  /api/driver-auth/register:
    post:
      operationId: DriverAuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriverInput'
      responses:
        '200':
          description: Driver register success but not verify
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/DriverLoginNotVerifyResponseDto'
      summary: Register Partner
      tags: &ref_2
        - Driver Auth
  /api/driver-auth/login:
    post:
      operationId: DriverAuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverLoginInput'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/ClientLoginResponseDto'
        '401':
          description: Unauthorized
      summary: Driver login
      tags: *ref_2
  /api/driver-auth/refresh-token:
    post:
      operationId: DriverAuthController_refreshToken
      parameters: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseDTO'
                  - properties:
                      data:
                        type: object
                        $ref: '#/components/schemas/ClientLoginResponseDto'
      summary: Refresh token for driver
      tags: *ref_2
  /api/user-auth/login:
    post:
      operationId: UserAuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLoginInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
        '401':
          description: Unauthorized
      summary: Customer login
      tags: &ref_3
        - user-auth
  /api/user-auth/refresh-token:
    get:
      operationId: UserAuthController_refreshToken
      parameters: []
      responses:
        '200':
          description: Successful refresh token
        '401':
          description: Unauthorized
      summary: Refresh token
      tags: *ref_3
  /api/payment/webhook:
    post:
      operationId: PaymentController_handleWebhook
      parameters: []
      responses:
        '201':
          description: ''
      summary: Handle payment webhook
      tags:
        - Payment
info:
  title: Shipppee system API
  description: The Shipppee system API description
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    Data:
      type: object
      properties:
        name:
          type: string
          description: Admin name
          example: Nguyen Cong Gioi
        username:
          type: string
          description: Admin username
          example: admin
        id:
          type: number
          description: Admin user ID
          example: '12'
      required:
        - id
    ResponseMeDTO:
      type: object
      properties:
        code:
          type: number
          example: 200
          description: status code
        success:
          type: boolean
          example: true
          description: status
        message:
          type: string
          example: success
          description: message
        timestamp:
          type: string
          example: '2021-09-01T14:00:00.000Z'
          description: timestamp
        data:
          description: Data
          allOf:
            - $ref: '#/components/schemas/Data'
      required:
        - code
        - success
        - message
        - timestamp
        - data
    CreateDriverInput:
      type: object
      properties:
        name:
          type: string
          description: Driver name
          example: Cong Gioi
        email:
          type: string
          description: Driver email
          example: conggioi.pro264@gmail.com
        password:
          type: string
          description: Driver password
          example: '123456'
        phone:
          type: string
          description: Driver phone number
          example: '0123456789'
        transportTypeId:
          type: number
          description: Transport type ID
          example: '1'
      required:
        - name
        - email
        - password
        - phone
        - transportTypeId
    UpdateDriverInput:
      type: object
      properties:
        name:
          type: string
          description: Driver name
          example: Cong Gioi
        email:
          type: string
          description: Driver email
          example: conggioi.pro264@gmail.com
        password:
          type: string
          description: Driver password
          example: '123456'
        phone:
          type: string
          description: Driver phone number
          example: '0123456789'
        transportTypeId:
          type: number
          description: Transport type ID
          example: '1'
        id:
          type: number
          description: Driver ID
          example: '12'
      required:
        - id
    CreateDriverInfoInput:
      type: object
      properties:
        idDriver:
          type: number
          description: Driver ID
          example: 1
      required:
        - idDriver
    UpdateDriverInfoInput:
      type: object
      properties:
        identityCardNumber:
          type: string
          description: Identity card number
          example: '123456789'
        imgIdentityCardFront:
          type: string
          description: Image identity card front
          example: 672ds-da9sdj-fas34-asd9
        imgIdentityCardBack:
          type: string
          description: Image identity card back
          example: 672ds-da9sdj-fas34-asd9
        driverLicenseNumber:
          type: string
          description: Identity card number
          example: '123456789'
        imgDriverLicenseFront:
          type: string
          description: Image Driver License front
          example: 672ds-da9sdj-fas34-asd9
        imgDriverLicenseBack:
          type: string
          description: Image Driver License back
          example: 672ds-da9sdj-fas34-asd9
        licensePlates:
          type: string
          description: license plates
          example: 76C193934
        imgVehicleRegistrationCertFront:
          type: string
          description: Image Vehicle Registration Cert Front
          example: 672ds-da9sdj-fas34-asd9
        imgVehicleRegistrationCertBack:
          type: string
          description: Image Vehicle Registration Cert Back
          example: 672ds-da9sdj-fas34-asd9
      required:
        - identityCardNumber
        - imgIdentityCardFront
        - imgIdentityCardBack
    CountDriverDto:
      type: object
      properties:
        isIdentityVerified:
          type: boolean
        isAiChecked:
          type: boolean
          default: false
        isRejected:
          type: boolean
          default: false
      required:
        - isIdentityVerified
        - isAiChecked
        - isRejected
    SignUrlInput:
      type: object
      properties:
        fileName:
          type: string
          description: File name
          example: image.jpg
        contentType:
          type: string
          description: Content type
          example: image/jpeg
      required:
        - fileName
        - contentType
    AdminLoginInput:
      type: object
      properties:
        username:
          type: string
          description: Admin username
          example: admin
        password:
          type: string
          description: Admin password
          example: '123456'
      required:
        - username
        - password
    LoginResponseDto:
      type: object
      properties:
        code:
          type: number
          example: 200
          description: status code
        success:
          type: boolean
          example: true
          description: status
        message:
          type: string
          example: success
          description: message
        timestamp:
          type: string
          example: '2021-09-01T14:00:00.000Z'
          description: timestamp
        data:
          description: Response data
          example:
            token: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.4S5s2
          allOf:
            - $ref: '#/components/schemas/Data'
      required:
        - code
        - success
        - message
        - timestamp
        - data
    DriverLoginInput:
      type: object
      properties:
        password:
          type: string
          description: Driver password
          example: '123456'
        phone:
          type: string
          description: Driver phone number
          example: '0123456789'
      required:
        - password
        - phone
    CustomerLoginInput:
      type: object
      properties:
        email:
          type: string
          example: conggioi@gmail.com
        password:
          type: string
          example: '********'
      required:
        - email
        - password
    UserSession:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - CUSTOMER
            - DRIVER
            - ADMIN
            - SUPER_ADMIN
        phone:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - id
        - name
        - email
        - role
        - phone
        - accessToken
        - refreshToken
    ResponseDTO:
      type: object
      properties:
        code:
          type: number
          example: 200
          description: status code
        success:
          type: boolean
          example: true
          description: status
        message:
          type: string
          example: success
          description: message
        timestamp:
          type: string
          example: '2021-09-01T14:00:00.000Z'
          description: timestamp
      required:
        - code
        - success
        - message
        - timestamp
    ClientLoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token
          example: ''
        refreshToken:
          type: string
          description: Refresh token
          example: ''
        expiresIn:
          type: number
          description: Token expiration time
          example: ''
      required:
        - accessToken
        - refreshToken
        - expiresIn
    TransportTypeDTO:
      type: object
      properties:
        id:
          type: string
          description: Transport type ID
          example: '1'
        name:
          type: string
          description: Transport name
          example: Xe máy
        imageUrl:
          type: string
          description: Transport type image URL
          example: https://media-shipppee.nguyenconggioi.me/moto_bike.png
        description:
          type: string
          description: Transport type description
          example: Hoạt động tất cả khung giờ, chở tối đa 100kg
        code:
          type: string
          enum:
            - BIKE
            - VAN_500
            - VAN_1T
            - TRUCK_1T
            - TRUCK_1T5
            - TRUCK_2T
          description: Transport type code
          example: BIKE
        loadWeight:
          type: number
          description: Transport type load weight
          example: 100000
        textWeight:
          type: string
          description: Transport type text weight
          example: 100Kg
        textSize:
          type: string
          description: Transport type text size
          example: 1 x 1 x 1 m
      required:
        - id
        - name
        - imageUrl
        - description
        - code
        - loadWeight
        - textWeight
        - textSize
    DriverLoginNotVerifyResponseDto:
      type: object
      properties:
        jwtVerify:
          type: string
          description: Access token
          example: ''
      required:
        - jwtVerify
